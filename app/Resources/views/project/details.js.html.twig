<script src="{{ asset('assets/Blackbird/lib/db.js') }}"></script>
<script type="text/javascript">
    $('document').ready(function () {
        var Biom = require('biojs-io-biom').Biom;
        var biomString = '{{ project['projects'][internal_project_id]['biom']|raw }}';
        var biomObject = JSON.parse(biomString);
        var organism_ids = biomObject.rows.filter(function (element) {
            return typeof element['metadata'] !== 'undefined' && element['metadata'] !== null && !isNaN(element['metadata']['fennec_organism_id']);
        }).map(function (element) {
            return element['metadata']['fennec_organism_id'];
        });
        var biom = new Biom(biomObject);
        $('#project-overview-table-id').text(biom.id);
        $('.page-header').text(biom.id);
        $('#project-overview-table-comment').text(biom.comment);
        $('#project-overview-table-rows').text(biom.shape[0]);
        $('#project-overview-table-cols').text(biom.shape[1]);
        $('#project-overview-table-nnz').text(biom.nnz + " (" + (100 * biom.nnz / (biom.shape[0] * biom.shape[1])).toFixed(2) + "%)");
        $('#editProjectDialogProjectID').val(biom.id);
        $('#editProjectDialogComment').val(biom.comment);
        $('#editProjectDialog').on('shown.bs.modal', function () {
            $('#editProjectDialogProjectID').val(biom.id);
            $('#editProjectDialogComment').val(biom.comment);
            $('#editProjectDialogProjectID').focus();
        });
        $('#editProjectDialogSaveButton').click(function () {
            biom.id = $('#editProjectDialogProjectID').val();
            biom.comment = $('#editProjectDialogComment').val();
            biom.write().then(function (biomJson) {
                $.ajax('{{ path('api', {'namespace': 'edit', 'classname': 'updateProject'}) }}', {
                    data: {
                        "dbversion": '{{ dbversion }}',
                        "project_id": {{ internal_project_id }},
                        "biom": biomJson
                    },
                    method: "POST",
                    success: function (data) {
                        location.reload();
                    }
                });
            }, function (failure) {
                console.log(failure);
            });
        });

        var sampleMetadataFennec = biom.getMetadata({dimension: 'columns', attribute: 'fennec'});
        var mappedSamples = countOrganismIds(sampleMetadataFennec);
        var percentageMappedSamples = 100 * mappedSamples / biom.shape[1];
        var otuMetadataFennec = biom.getMetadata({dimesion: 'rows', attribute: 'fennec'});
        var mappedOTUs = countOrganismIds(otuMetadataFennec);
        var percentageMappedOTUs = 100 * mappedOTUs / biom.shape[0];
        $('#mapping-otu').text(mappedOTUs);
        $('#progress-bar-mapping-otu').css('width', percentageMappedOTUs+'%').attr('aria-valuenow', percentageMappedOTUs);
        $('#progress-bar-mapping-otu').text(percentageMappedOTUs.toFixed(0)+'%');
        $('#mapping-sample').text(mappedSamples);
        $('#progress-bar-mapping-sample').css('width', percentageMappedSamples+'%').attr('aria-valuenow', percentageMappedSamples);
        $('#progress-bar-mapping-sample').text(percentageMappedSamples.toFixed(0)+'%');

        function countOrganismIds(metadata) {
            var organismIds = 0;
            $.each(metadata, function (key, value) {
                if (hasOrganismId(value)) {
                    organismIds++;
                }
            });
            return organismIds;
        }

        function hasOrganismId(value) {
            return value !== null && '{{ dbversion }}' in value && 'organism_id' in value['{{ dbversion }}'] && value['{{ dbversion }}'].organism_id !== null;
        }

        $('#inspect-with-blackbird-button').click(function () {
            db.open({
                server: "BiomData",
                version: 1,
                schema: {
                    "biom": {
                        key: {
                            keyPath: 'id',
                            autoIncrement: true
                        }
                    }
                }
            }).done(function (server) {
                biomToStore = {};
                biomToStore.name = biomObject.id;
                if (!biomObject.columns[0].hasOwnProperty('metadata') ||
                        biomObject.columns[0].metadata === null || !biomObject.columns[0].metadata.hasOwnProperty('phinchID')) {
                    for (i = 0; i < biomObject.columns.length; i++) {
                        if (!biomObject.columns[i].hasOwnProperty('metadata') || biomObject.columns[i].metadata === null) {
                            biomObject.columns[i].metadata = [];
                        }
                        biomObject.columns[i].metadata.phinchID = i;
                    }
                    biomString = JSON.stringify(biomObject);
                }
                biomToStore.size = biomString.length;
                biomToStore.data = biomString;
                d = new Date();
                biomToStore.date = d.getUTCFullYear() + "-" + (d.getUTCMonth() + 1) + "-" + d.getUTCDate() + "T" + d.getUTCHours() + ":" + d.getUTCMinutes() + ":" + d.getUTCSeconds() + " UTC";
                server.biom.add(biomToStore).done(function (item) {
                    $('#inspect-with-blackbird-iframe').attr('src', '{{ asset('assets/Blackbird/preview.html') }}');
                    $('#inspect-with-blackbird-iframe').show();
                });
            });
        });

        $('#inspect-with-blackbird-iframe').on("load", function () {
            setTimeout(function () {
                console.log($('#inspect-with-blackbird-iframe').contents().height());
                $('#inspect-with-blackbird-iframe').attr('height', $('#inspect-with-blackbird-iframe').contents().height() + 20);
            }, 1000);
        });

        // Get traits
        var traits = [];
        $.ajax('{{ path('api', {'namespace': 'details', 'classname': 'traitsOfOrganisms'}) }}', {
            data: {
                "dbversion": '{{ dbversion }}',
                "organism_ids": organism_ids
            },
            method: "POST",
            success: function (data) {
                $.each(data, function (key, value) {
                    var thisTrait = {
                        id: key,
                        trait: value['trait_type'],
                        count: value['trait_entry_ids'].length,
                        range: 100 * value['organism_ids'].length / organism_ids.length
                    };
                    traits.push(thisTrait);
                });
                initTraitsOfProjectTable({{ internal_project_id }});
            }
        });
        function initTraitsOfProjectTable(internal_project_id) {
            $('#trait-table').DataTable({
                data: traits,
                columns: [
                    {data: 'trait'},
                    {data: 'count'},
                    {data: 'range'},
                    {data: null}
                ],
                order: [2, "desc"],
                columnDefs: [
                    {
                        targets: 2,
                        render: function (data, type, full, meta) {
                            return '<span title="' + data / 100 + '"></span><div class="progress"><div class="progress-bar progress-bar-trait" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: ' + data + '%">' + Math.round(data) + '%</div></div>';
                        },
                        type: 'title-numeric'
                    },
                    {
                        targets: 0,
                        render: function (data, type, full, meta) {
                            var href = Routing.generate('trait_details', {
                                'dbversion': '{{ dbversion }}',
                                'trait_type_id': full.id
                            });
                            return '<a href="' + href + '">' + full.trait + '</a>';
                        }
                    },
                    {
                        targets: 3,
                        render: function (data, type, full, meta) {
                            var href = Routing.generate('project_trait_details', {
                                'dbversion': '{{ dbversion }}',
                                'trait_type_id': full.id,
                                'project_id': '{{ internal_project_id }}'
                            });
                            return '<a href="' + href + '">Details</a>';
                        }
                    }
                ]
            });
        }
    });
</script>
